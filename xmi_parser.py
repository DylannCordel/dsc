"""
Parsing utility for Tango .xmi files.

"""

from lxml import etree
import models
import os
import logging
import re

logger = logging.getLogger(__name__)


class TangoXmiParser:
    """
        Parses .xmi files generated by Pogo
    """

    def __init__(self, file_path):
        self.file_path = file_path
        self.tree = etree.parse(self.file_path)

        # classes related elements
        self.classes_elements = self.tree.findall('classes')

    def get_device_server(self):
        """
        Return a device server model from the parsed file
        :return: device server object created from the file
        """

        name = os.path.splitext(os.path.basename(self.file_path))[0]
        description = None
        ds_license = None
        description_element = self.classes_elements[0].find('description')
        if description_element is not None:
            description = description_element.attrib['description']
            ds_license = description_element.attrib['license']

        return models.DeviceServer(name=name, descritpition=description, license=ds_license)

    def get_device_classes(self):
        """
        Parse the .xmi file for classes definitions
        :return: list of DeviceClass objects
        """
        cls = []

        for cl in self.classes_elements:
            name = cl.attrib.get('name')
            description_element = self.classes_elements[0].find('description')
            description = ''
            if description_element is not None:
                description = description_element.attrib.get('description')
            cls.append(models.DeviceClass(name=name, description=description))

        return cls

    def get_device_class_info(self, cl):
        """
        Return info related to class cl
        :param cl: name or DeviceClass object for which the info has to be retrived
        :return: DeviceClassInfo objec
        """
        # find class name
        if isinstance(cl, str):
            name = cl
        elif isinstance(cl, models.DeviceClass):
            name = cl.name
        elif hasattr(cl, 'attrib'):
            name = cl.attrib.get('name')
        else:
            name = str(cl)

        # find class element in the .xmi
        class_element = next((x for x in self.classes_elements if x.attrib.get('name') == name), None)
        if class_element is None:
            logger.error("Class of provided name does not exist in the xmi file.")
            return None

        # find related description element
        description_element = class_element.find('description')
        if description_element is None:
            logger.error("No description for the class in the XMI file.")
            return None

        # then identification element
        identification_element = description_element.find('identification')
        if identification_element is None:
            logger.error("No identification for the class in the XMI file.")
            return None

        # parse for email (there are two ways of coding it in the .xmi file)
        contact_email_attrib = identification_element.attrib.get('contact')
        author = identification_element.attrib.get('author')
        email_domain = identification_element.attrib.get('emailDomain')
        if contact_email_attrib is None:
            contact_email = "%s@%s" % (author, email_domain)
        else:
            email_re = re.search(r'at (.*) - (.*)', contact_email_attrib)
            contact_email = "%s@%s" % (email_re.group(2), email_re.group(1))

        # get other info frm the element
        class_family = identification_element.attrib.get('classFamily')
        platform = identification_element.attrib.get('platform')
        bus = identification_element.attrib.get('bus')
        manufacturer = identification_element.attrib.get('manufacturer')
        # key words are listed in their own tag
        kw_elements = identification_element.findall('keyWords')
        key_words = ','.join([kw.text for kw in kw_elements])

        # return a model object build of  information retrieved
        return models.DeviceClassInfo(
            xmi_file=self.file_path,
            contact_email=contact_email,
            class_family=class_family,
            platform=platform,
            bus=bus,
            manufacturer=manufacturer,
            key_words=key_words
        )

    def get_device_attributes(self, cl):
        """
        Retrun list of attributes for class cl
        :param cl: name or DeviceClass obejct
        :return: list of DeviceAttribute obejcts
        """
        # TODO: Implement
        # find class name
        if isinstance(cl, str):
            name = cl
        elif isinstance(cl, models.DeviceClass):
            name = cl.name
        elif hasattr(cl, 'attrib'):
            name = cl.attrib.get('name')
        else:
            name = str(cl)

        # find class element in the .xmi
        class_element = next((x for x in self.classes_elements if x.attrib.get('name') == name), None)
        if class_element is None:
            logger.error("Class of provided name does not exist in the xmi file.")
            return None

        # find related description element
        description_element = class_element.find('description')
        if description_element is None:
            logger.error("No description for the class in the XMI file.")
            return None

        return None

    def get_device_commands(self, cl):
        """
        Retrun list of commands for class cl
        :param cl: name or DeviceClass obejct
        :return: list of DeviceCommand obejcts
        """
        # TODO: Implement

        return None
