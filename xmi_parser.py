'''
Parsing utility for Tango .xmi files.

'''

from lxml import etree, Element
import models
from os import path

class TangoXmiParser:
    '''
    Parses .xmi files generated by Pogo
    '''

    def __init__(self, file_path):
        self.file_path = file_path
        self.tree = etree.parse(self.file_path)

        # classes related elements
        self.classes_elements = etree.findall('classes')


    def get_device_server(self):
        '''
        Return a device server model from the parsed file
        :return: device server object created from the file
        '''
        # TODO: Implement

        name = os.path.splitext(os.path.basename(self.file_path))[0]
        description = None
        license = None
        description_element = self.classes_elements[0].find('description')
        if description_element!=None:
            description = description_element.attrib['description']
            license = description_element.attrib['license']

        return models.DeviceServer(name=name, descritpition=description, license=license)

    def get_device_classes(self):
        """
        Parse the .xmi file for classes definitions
        :return: list of DeviceClass objects
        """
        cls = []

        for cl in self.classes_elements:
            name = cl.attrib['name']
            description_element = self.classes_elements[0].find('description')
            description = ''
            if description_element!=None:
                description=description_element.attrib['description']
            cls.append(models.DeviceClass(name=name, description=description))

        return cls

    def get_device_class_info(self, cl):
        """
        Return info related to class cl
        :param cl: name or DeviceClass object for which the info has to be retrived
        :return: DevicClassInfo objec
        """
        # TODO: Implement
        if isinstance(cl, str):
            name = cl
        elif isinstance(cl, models.DeviceClass):
            name = cl.name
        elif isinstance(cl,Element):
            name = cl.attrib['name']
        else:
            return None

        class_element = next((x for x in self.classes_elements if x.attrib['name']==name), None)
        description_element = class_element.find('description')

        return None

    def get_device_attributes(self, cl):
        '''
        Retrun list of attributes for class cl
        :param cl: name or DeviceClass obejct
        :return: list of DeviceAttribute obejcts
        '''
        # TODO: Implement
        return None

    def get_device_commands(self, cl):
        '''
        Retrun list of commands for class cl
        :param cl: name or DeviceClass obejct
        :return: list of DeviceCommand obejcts
        '''
        # TODO: Implement
        return None